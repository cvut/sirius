#!/usr/bin/env ruby

require 'bundler'
Bundler.setup
require './lib/initializer'
require 'rufus-scheduler'

scheduler = Rufus::Scheduler.new

class SyncHandler
  def initialize
    require 'sirius/schedule_manager'
    require 'pliny/tasks'
    Dir['lib/tasks/*.rake'].each { |task| load task }
    @logger = Logging.logger[self]
  end

  def call(job, time)
    @logger.info "Scheduled import started."
    start = Time.now

    Rake::Task.tasks.each(&:reenable)
    Rake::Task['sirius:events'].invoke

    finish = Time.now
    @logger.info "Scheduled import finished. Time taken: #{finish - start} s."
  end
end

def scheduler.on_error(job, error)
  begin
    Raven.capture_exception(error, logger: 'scheduler', extra: { job: job })
  rescue => e
    Logging.logger[self].error e
  ensure
    super
  end
end

if Config.sync_schedule
  Logging.logger[:scheduler].info "Setting automatic sync to '#{Config.sync_schedule}'"
  scheduler.repeat Config.sync_schedule, SyncHandler.new, overlap: false, timeout: '1h'
else
  Logging.logger[:scheduler].info 'SYNC_SCHEDULE not configured, automatic sync will be disabled'
end

scheduler.join
